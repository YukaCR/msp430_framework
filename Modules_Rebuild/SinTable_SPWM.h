/*
*   Author: YukaCR
*   excellent compressed sin table with fast query speed.
*   also have high resolution.
*   used at dds and spwm generation
*   use magical type hack and bit operation.
*/
#ifndef __linux__
#include "msp430.h"
#endif
#include "stdint.h"
#define SinLengthBIT uint16_t

const SinLengthBIT sin_length[] = {4,10,16,23,29,36,42,48,55,61,67,74,80,86,93,99,106,112,118,125,131,137,144,150,156,163,169,176,182,188,195,201,207,214,220,227,233,239,246,252,258,265,271,278,284,290,297,303,309,316,322,329,335,341,348,354,360,367,373,380,386,392,399,405,411,418,424,431,437,443,450,456,462,469,475,482,488,494,501,507,514,520,526,533,539,545,552,558,565,571,577,584,590,597,603,609,616,622,629,635,641,648,654,661,667,673,680,686,693,699,705,712,718,725,731,737,744,750,757,763,769,776,782,789,795,802,808,814,821,827,834,840,847,853,859,866,872,879,885,891,898,904,911,917,924,930,937,943,949,956,962,969,975,982,988,994,1001,1007,1014,1020,1027,1033,1040,1046,1053,1059,1065,1072,1078,1085,1091,1098,1104,1111,1117,1124,1130,1137,1143,1149,1156,1162,1169,1175,1182,1188,1195,1201,1208,1214,1221,1227,1234,1240,1247,1253,1260,1266,1273,1279,1286,1292,1299,1305,1312,1318,1325,1331,1338,1344,1351,1357,1364,1370,1377,1383,1390,1396,1403,1409,1416,1422,1429,1435,1442,1449,1455,1462,1468,1475,1481,1488,1494,1501,1507,1514,1521,1527,1534,1540,1547,1553,1560,1566,1573,1580,1586,1593,1599,1606,1612,1619,1626,1632,1639,1645,1652,1658,1665,1672,1678,1685,1691,1698,1705,1711,1718,1724,1731,1738,1744,1751,1758,1764,1771,1777,1784,1791,1797,1804,1811,1817,1824,1830,1837,1844,1850,1857,1864,1870,1877,1884,1890,1897,1904,1910,1917,1924,1930,1937,1944,1950,1957,1964,1970,1977,1984,1990,1997,2004,2010,2017,2024,2031,2037,2044,2051,2057,2064,2071,2078,2084,2091,2098,2104,2111,2118,2125,2131,2138,2145,2152,2158,2165,2172,2179,2185,2192,2199,2206,2212,2219,2226,2233,2240,2246,2253,2260,2267,2273,2280,2287,2294,2301,2307,2314,2321,2328,2335,2342,2348,2355,2362,2369,2376,2383,2389,2396,2403,2410,2417,2424,2430,2437,2444,2451,2458,2465,2472,2479,2485,2492,2499,2506,2513,2520,2527,2534,2541,2548,2554,2561,2568,2575,2582,2589,2596,2603,2610,2617,2624,2631,2638,2645,2652,2659,2666,2672,2679,2686,2693,2700,2707,2714,2721,2728,2735,2742,2749,2756,2763,2770,2777,2784,2792,2799,2806,2813,2820,2827,2834,2841,2848,2855,2862,2869,2876,2883,2890,2897,2904,2912,2919,2926,2933,2940,2947,2954,2961,2968,2976,2983,2990,2997,3004,3011,3018,3026,3033,3040,3047,3054,3061,3069,3076,3083,3090,3097,3105,3112,3119,3126,3133,3141,3148,3155,3162,3170,3177,3184,3191,3199,3206,3213,3220,3228,3235,3242,3250,3257,3264,3272,3279,3286,3293,3301,3308,3315,3323,3330,3338,3345,3352,3360,3367,3374,3382,3389,3396,3404,3411,3419,3426,3434,3441,3448,3456,3463,3471,3478,3486,3493,3501,3508,3515,3523,3530,3538,3545,3553,3560,3568,3575,3583,3591,3598,3606,3613,3621,3628,3636,3643,3651,3659,3666,3674,3681,3689,3697,3704,3712,3719,3727,3735,3742,3750,3758,3765,3773,3781,3788,3796,3804,3811,3819,3827,3835,3842,3850,3858,3866,3873,3881,3889,3897,3904,3912,3920,3928,3936,3943,3951,3959,3967,3975,3983,3990,3998,4006,4014,4022,4030,4038,4046,4053,4061,4069,4077,4085,4093,4101,4109,4117,4125,4133,4141,4149,4157,4165,4173,4181,4189,4197,4205,4213,4221,4229,4238,4246,4254,4262,4270,4278,4286,4294,4303,4311,4319,4327,4335,4344,4352,4360,4368,4376,4385,4393,4401,4409,4418,4426,4434,4443,4451,4459,4468,4476,4484,4493,4501,4509,4518,4526,4535,4543,4551,4560,4568,4577,4585,4594,4602,4611,4619,4628,4636,4645,4653,4662,4670,4679,4687,4696,4705,4713,4722,4731,4739,4748,4757,4765,4774,4783,4791,4800,4809,4818,4826,4835,4844,4853,4861,4870,4879,4888,4897,4906,4915,4923,4932,4941,4950,4959,4968,4977,4986,4995,5004,5013,5022,5031,5040,5049,5058,5067,5077,5086,5095,5104,5113,5122,5131,5141,5150,5159,5168,5178,5187,5196,5205,5215,5224,5233,5243,5252,5262,5271,5280,5290,5299,5309,5318,5328,5337,5347,5356,5366,5375,5385,5395,5404,5414,5424,5433,5443,5453,5462,5472,5482,5492,5501,5511,5521,5531,5541,5551,5561,5570,5580,5590,5600,5610,5620,5630,5640,5651,5661,5671,5681,5691,5701,5711,5722,5732,5742,5752,5763,5773,5783,5794,5804,5814,5825,5835,5846,5856,5867,5877,5888,5899,5909,5920,5930,5941,5952,5963,5973,5984,5995,6006,6017,6027,6038,6049,6060,6071,6082,6093,6104,6115,6127,6138,6149,6160,6171,6183,6194,6205,6217,6228,6239,6251,6262,6274,6285,6297,6309,6320,6332,6344,6355,6367,6379,6391,6403,6414,6426,6438,6450,6462,6475,6487,6499,6511,6523,6536,6548,6560,6573,6585,6597,6610,6623,6635,6648,6660,6673,6686,6699,6712,6725,6738,6751,6764,6777,6790,6803,6816,6830,6843,6856,6870,6883,6897,6911,6924,6938,6952,6966,6979,6993,7007,7022,7036,7050,7064,7078,7093,7107,7122,7136,7151,7166,7181,7196,7211,7226,7241,7256,7271,7287,7302,7318,7333,7349,7365,7380,7396,7412,7429,7445,7461,7478,7494,7511,7528,7544,7561,7579,7596,7613,7630,7648,7666,7684,7702,7720,7738,7756,7775,7793,7812,7831,7850,7870,7889,7909,7928,7948,7969,7989,8010,8030,8051,8073,8094,8116,8138,8160,8182,8205,8228,8252,8275,8299,8323,8348,8373,8398,8424,8450,8477,8504,8532,8560,8588,8618,8647,8678,8709,8741,8774,8808,8842,8878,8915,8953,8993,9034,9077,9122,9170,9220,9274,9333,9396,9468,9550,9652,9799,10000,10201,10348,10450,10532,10604,10667,10726,10780,10830,10878,10923,10966,11007,11047,11085,11122,11158,11192,11226,11259,11291,11322,11353,11382,11412,11440,11468,11496,11523,11550,11576,11602,11627,11652,11677,11701,11725,11748,11772,11795,11818,11840,11862,11884,11906,11927,11949,11970,11990,12011,12031,12052,12072,12091,12111,12130,12150,12169,12188,12207,12225,12244,12262,12280,12298,12316,12334,12352,12370,12387,12404,12421,12439,12456,12472,12489,12506,12522,12539,12555,12571,12588,12604,12620,12635,12651,12667,12682,12698,12713,12729,12744,12759,12774,12789,12804,12819,12834,12849,12864,12878,12893,12907,12922,12936,12950,12964,12978,12993,13007,13021,13034,13048,13062,13076,13089,13103,13117,13130,13144,13157,13170,13184,13197,13210,13223,13236,13249,13262,13275,13288,13301,13314,13327,13340,13352,13365,13377,13390,13403,13415,13427,13440,13452,13464,13477,13489,13501,13513,13525,13538,13550,13562,13574,13586,13597,13609,13621,13633,13645,13656,13668,13680,13691,13703,13715,13726,13738,13749,13761,13772,13783,13795,13806,13817,13829,13840,13851,13862,13873,13885,13896,13907,13918,13929,13940,13951,13962,13973,13983,13994,14005,14016,14027,14037,14048,14059,14070,14080,14091,14101,14112,14123,14133,14144,14154,14165,14175,14186,14196,14206,14217,14227,14237,14248,14258,14268,14278,14289,14299,14309,14319,14329,14339,14349,14360,14370,14380,14390,14400,14410,14420,14430,14439,14449,14459,14469,14479,14489,14499,14508,14518,14528,14538,14547,14557,14567,14576,14586,14596,14605,14615,14625,14634,14644,14653,14663,14672,14682,14691,14701,14710,14720,14729,14738,14748,14757,14767,14776,14785,14795,14804,14813,14822,14832,14841,14850,14859,14869,14878,14887,14896,14905,14914,14923,14933,14942,14951,14960,14969,14978,14987,14996,15005,15014,15023,15032,15041,15050,15059,15068,15077,15085,15094,15103,15112,15121,15130,15139,15147,15156,15165,15174,15182,15191,15200,15209,15217,15226,15235,15243,15252,15261,15269,15278,15287,15295,15304,15313,15321,15330,15338,15347,15355,15364,15372,15381,15389,15398,15406,15415,15423,15432,15440,15449,15457,15465,15474,15482,15491,15499,15507,15516,15524,15532,15541,15549,15557,15566,15574,15582,15591,15599,15607,15615,15624,15632,15640,15648,15656,15665,15673,15681,15689,15697,15706,15714,15722,15730,15738,15746,15754,15762,15771,15779,15787,15795,15803,15811,15819,15827,15835,15843,15851,15859,15867,15875,15883,15891,15899,15907,15915,15923,15931,15939,15947,15954,15962,15970,15978,15986,15994,16002,16010,16017,16025,16033,16041,16049,16057,16064,16072,16080,16088,16096,16103,16111,16119,16127,16134,16142,16150,16158,16165,16173,16181,16189,16196,16204,16212,16219,16227,16235,16242,16250,16258,16265,16273,16281,16288,16296,16303,16311,16319,16326,16334,16341,16349,16357,16364,16372,16379,16387,16394,16402,16409,16417,16425,16432,16440,16447,16455,16462,16470,16477,16485,16492,16499,16507,16514,16522,16529,16537,16544,16552,16559,16566,16574,16581,16589,16596,16604,16611,16618,16626,16633,16640,16648,16655,16662,16670,16677,16685,16692,16699,16707,16714,16721,16728,16736,16743,16750,16758,16765,16772,16780,16787,16794,16801,16809,16816,16823,16830,16838,16845,16852,16859,16867,16874,16881,16888,16895,16903,16910,16917,16924,16931,16939,16946,16953,16960,16967,16974,16982,16989,16996,17003,17010,17017,17024,17032,17039,17046,17053,17060,17067,17074,17081,17088,17096,17103,17110,17117,17124,17131,17138,17145,17152,17159,17166,17173,17180,17187,17194,17201,17208,17216,17223,17230,17237,17244,17251,17258,17265,17272,17279,17286,17293,17300,17307,17314,17321,17328,17334,17341,17348,17355,17362,17369,17376,17383,17390,17397,17404,17411,17418,17425,17432,17439,17446,17452,17459,17466,17473,17480,17487,17494,17501,17508,17515,17521,17528,17535,17542,17549,17556,17563,17570,17576,17583,17590,17597,17604,17611,17617,17624,17631,17638,17645,17652,17658,17665,17672,17679,17686,17693,17699,17706,17713,17720,17727,17733,17740,17747,17754,17760,17767,17774,17781,17788,17794,17801,17808,17815,17821,17828,17835,17842,17848,17855,17862,17869,17875,17882,17889,17896,17902,17909,17916,17922,17929,17936,17943,17949,17956,17963,17969,17976,17983,17990,17996,18003,18010,18016,18023,18030,18036,18043,18050,18056,18063,18070,18076,18083,18090,18096,18103,18110,18116,18123,18130,18136,18143,18150,18156,18163,18170,18176,18183,18189,18196,18203,18209,18216,18223,18229,18236,18242,18249,18256,18262,18269,18276,18282,18289,18295,18302,18309,18315,18322,18328,18335,18342,18348,18355,18361,18368,18374,18381,18388,18394,18401,18407,18414,18420,18427,18434,18440,18447,18453,18460,18466,18473,18479,18486,18493,18499,18506,18512,18519,18525,18532,18538,18545,18551,18558,18565,18571,18578,18584,18591,18597,18604,18610,18617,18623,18630,18636,18643,18649,18656,18662,18669,18675,18682,18688,18695,18701,18708,18714,18721,18727,18734,18740,18747,18753,18760,18766,18773,18779,18786,18792,18799,18805,18812,18818,18825,18831,18838,18844,18851,18857,18863,18870,18876,18883,18889,18896,18902,18909,18915,18922,18928,18935,18941,18947,18954,18960,18967,18973,18980,18986,18993,18999,19006,19012,19018,19025,19031,19038,19044,19051,19057,19063,19070,19076,19083,19089,19096,19102,19109,19115,19121,19128,19134,19141,19147,19153,19160,19166,19173,19179,19186,19192,19198,19205,19211,19218,19224,19231,19237,19243,19250,19256,19263,19269,19275,19282,19288,19295,19301,19307,19314,19320,19327,19333,19339,19346,19352,19359,19365,19371,19378,19384,19391,19397,19403,19410,19416,19423,19429,19435,19442,19448,19455,19461,19467,19474,19480,19486,19493,19499,19506,19512,19518,19525,19531,19538,19544,19550,19557,19563,19569,19576,19582,19589,19595,19601,19608,19614,19620,19627,19633,19640,19646,19652,19659,19665,19671,19678,19684,19691,19697,19703,19710,19716,19722,19729,19735,19742,19748,19754,19761,19767,19773,19780,19786,19793,19799,19805,19812,19818,19824,19831,19837,19844,19850,19856,19863,19869,19875,19882,19888,19894,19901,19907,19914,19920,19926,19933,19939,19945,19952,19958,19964,19971,19977,19984,19990,19996,20000};
const uintptr_t sin_length_end = (uintptr_t)(sin_length) + sizeof(sin_length);
const uintptr_t sin_length_begin = (uintptr_t)(sin_length);
const uint32_t freq = 40000;
const uint32_t half_freq = freq >> 1;
const uint32_t quart_freq = freq >> 2;
const uint32_t RW_Peroid = sizeof(sin_length) / sizeof(SinLengthBIT);

uint16_t Sin(uint32_t position){
    int32_t in_peroid = position%freq;
    bool negative = in_peroid/half_freq;//8192 => 0x2000 4096 0x1fff
    bool direction = (in_peroid%half_freq)/quart_freq;
    in_peroid = in_peroid % quart_freq;
    uintptr_t sin_min_position,sin_max_position;
    uint16_t result;
    if(direction){
        in_peroid = quart_freq - in_peroid;
    }
    if(*(SinLengthBIT*)((sin_length_end + sin_length_begin)>>1) > in_peroid){
        sin_min_position = sin_length_begin;
        sin_max_position = (sin_length_end + sin_length_begin)>>1;
    }
    else{
        sin_min_position = (sin_length_end + sin_length_begin)>>1;
        sin_max_position = sin_length_end;
    }
    while(sin_max_position-sin_min_position-sizeof(SinLengthBIT)){
        uintptr_t sin_mid_position = (sin_max_position+ sin_min_position)>>1;
        if(*(SinLengthBIT*)sin_mid_position > in_peroid){
            sin_max_position = sin_mid_position;
        }
        else{
            sin_min_position = sin_mid_position;
        }
    }
    result = (sin_min_position - sin_length_begin) >> 2;
    if(negative){result = RW_Peroid - result;}else{result += RW_Peroid;};
    return result;
}
#if 0
    if ((dir&&(position <= N_position))||((!dir)&&position >= N_position)){
        if(!neg){
            HW_MPY_16_32_U(R_position,mult,Remp);
        }
        else{
            HW_MPY_16_32_U(R_position,mult,Remp);
            TA2CCR2 = RW_Peroid - (Remp >> Q);
        }
        if(dir){
            if(R_position == 0){
                dir = 0;
                neg = !neg;
                R_position += 1;
            }else{
                R_position -= 1;    
            }
        }
        else{
            if(R_position >= RW_Peroid - 1){
                dir = 1;
                R_position -= 1;    
            }
            else{
                R_position += 1;
            }
        }
        N_position = *(sin_length + R_position);
    }
#endif
#ifdef __linux__    
uint16_t TA2CCR2 = 0;
#undef HW_MPY_16_32_U
#define HW_MPY_16_32_U(x,y,z) z=(uint64_t)y*(uint64_t)x
#endif
