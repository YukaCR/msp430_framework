#ifndef SPWM_int
#define SPWM_int
#include "SinTable_SPWM.h"
#include "../Modules/MPY32.h"
#ifndef __linux__
#include "../Modules/MPY32.h"
#include "../vscode.h"
#endif
uint16_t data_pwm_test[] = {256,260,264,268,272,276,280,284,288,292,296,300,303,307,311,315,319,323,327,331,335,338,342,346,350,353,357,361,364,368,372,375,379,382,386,389,393,396,399,403,406,409,412,416,419,422,425,428,431,434,437,439,442,445,448,450,453,455,458,460,463,465,467,469,472,474,476,478,480,482,484,485,487,489,490,492,494,495,496,498,499,500,501,502,503,504,505,506,507,508,508,509,509,510,510,511,511,511,511,511,512,511,511,511,511,511,510,510,509,509,508,508,507,506,505,504,503,502,501,500,499,498,496,495,494,492,490,489,487,485,484,482,480,478,476,474,472,469,467,465,463,460,458,455,453,450,448,445,442,439,437,434,431,428,425,422,419,416,412,409,406,403,399,396,393,389,386,382,379,375,372,368,364,361,357,353,350,346,342,338,335,331,327,323,319,315,311,307,303,300,296,292,288,284,280,276,272,268,264,260,255,251,247,243,239,235,231,227,223,219,215,211,208,204,200,196,192,188,184,180,176,173,169,165,161,158,154,150,147,143,139,136,132,129,125,122,118,115,112,108,105,102,99,95,92,89,86,83,80,77,74,72,69,66,63,61,58,56,53,51,48,46,44,42,39,37,35,33,31,29,27,26,24,22,21,19,17,16,15,13,12,11,10,9,8,7,6,5,4,3,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,15,16,17,19,21,22,24,26,27,29,31,33,35,37,39,42,44,46,48,51,53,56,58,61,63,66,69,72,74,77,80,83,86,89,92,95,99,102,105,108,112,115,118,122,125,129,132,136,139,143,147,150,154,158,161,165,169,173,176,180,184,188,192,196,200,204,208,211,215,219,223,227,231,235,239,243,247,251,256,260};
const uint16_t data_pwm_test_template[] = {256,260,264,268,272,276,280,284,288,292,296,300,303,307,311,315,319,323,327,331,335,338,342,346,350,353,357,361,364,368,372,375,379,382,386,389,393,396,399,403,406,409,412,416,419,422,425,428,431,434,437,439,442,445,448,450,453,455,458,460,463,465,467,469,472,474,476,478,480,482,484,485,487,489,490,492,494,495,496,498,499,500,501,502,503,504,505,506,507,508,508,509,509,510,510,511,511,511,511,511,512,511,511,511,511,511,510,510,509,509,508,508,507,506,505,504,503,502,501,500,499,498,496,495,494,492,490,489,487,485,484,482,480,478,476,474,472,469,467,465,463,460,458,455,453,450,448,445,442,439,437,434,431,428,425,422,419,416,412,409,406,403,399,396,393,389,386,382,379,375,372,368,364,361,357,353,350,346,342,338,335,331,327,323,319,315,311,307,303,300,296,292,288,284,280,276,272,268,264,260,255,251,247,243,239,235,231,227,223,219,215,211,208,204,200,196,192,188,184,180,176,173,169,165,161,158,154,150,147,143,139,136,132,129,125,122,118,115,112,108,105,102,99,95,92,89,86,83,80,77,74,72,69,66,63,61,58,56,53,51,48,46,44,42,39,37,35,33,31,29,27,26,24,22,21,19,17,16,15,13,12,11,10,9,8,7,6,5,4,3,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,15,16,17,19,21,22,24,26,27,29,31,33,35,37,39,42,44,46,48,51,53,56,58,61,63,66,69,72,74,77,80,83,86,89,92,95,99,102,105,108,112,115,118,122,125,129,132,136,139,143,147,150,154,158,161,165,169,173,176,180,184,188,192,196,200,204,208,211,215,219,223,227,231,235,239,243,247,251,256,260};

uint16_t currentAmp = 512;
void SPWM_SetAmp(float amp){
    uint16_t ULoP0 = amp * 512;//with 512bit Modulation
    uint16_t i = 402;
    if(amp>1){return;}
    if(amp<0){return;}
    currentAmp =  amp * 512;
    while(i--){
        HW_MPY_16_16_STA_U_RShift(ULoP0,data_pwm_test_template[i],data_pwm_test[i],9);
    }
}
void SPWM_SetAmp(uint16_t amp){
    uint16_t ULoP0 = amp;//with 512bit Modulation
    uint16_t i = 402;
    if(amp>=512){return;}
    if(amp<=0){return;}
    currentAmp =  amp;
    while(i--){
        HW_MPY_16_16_STA_U_RShift(ULoP0,data_pwm_test_template[i],data_pwm_test[i],9);
    }
}
uint8_t Freq_Prec = 50;
const float Friq = 6.68;
inline uint8_t SPWM_GetFreq(){
    return Freq_Prec;
}
void SPWM_Freq(float Freq){
    Freq_Prec = Freq;
    if(Freq > 100){
        Freq_Prec = 100;
        UCSCTL2 = 668;//setup at 100Hz
        TA2CTL &=~ ID_3;
    }
    else if(Freq > 50){
        UCSCTL2 = Freq * Friq;// + 334 setup at 100Hz
        TA2CTL &=~ ID_3;
    }
    else if(Freq > 25){
        UCSCTL2 = Freq * 2 * Friq;
        TA2CTL &=~ ID_3;
        TA2CTL |= ID_1;
    }
    else if(Freq > 12.5){
        UCSCTL2 = Freq * 4 * Friq;
        TA2CTL &=~ ID_3;
        TA2CTL |= ID_2;
    }
    else if(Freq > 6.25){
        UCSCTL2 = Freq * 8 * Friq;
        TA2CTL |= ID_3;
    }
    else{
        Freq_Prec = 6;
        UCSCTL2 = 334;//setup at 100Hz
        TA2CTL |= ID_3;
    }
}
void Setup_SPWM(){
    uint16_t i = 400;
    while(i--){
        *(data_pwm_test + i)+=20;
    }
    DMACTL0 |=DMA0TSEL__TA2CCR0;
    DMACTL4 = DMARMWDIS; // Read-modify-write disable
    DMA0CTL &= ~DMAIFG;
    __data20_write_long((uintptr_t)&DMA0SA, (uintptr_t)data_pwm_test);
    __data20_write_long((uintptr_t)&DMA0DA, (uintptr_t)&TA2CCR2);
    DMA0CTL = DMADT_4 + DMAEN + DMASRCINCR_3 + DMAIE; // Rpt single tranfer, inc dst, Int
    DMA0SZ = (sizeof(data_pwm_test)/sizeof(uint16_t)) - 2; // DMA0 size = 1
    i = 200;
    while(i--){
        TA2CCTL0 |= CCIFG;
        TA2CCTL0 &=~ CCIFG;
    } 
    DMACTL0 |= DMA1TSEL__TA2CCR0;
    DMA1CTL &= ~DMAIFG;
    __data20_write_long((uintptr_t)&DMA1SA, (uintptr_t)(data_pwm_test + 2));
    __data20_write_long((uintptr_t)&DMA1DA, (uintptr_t)&TA2CCR1);
    DMA1CTL = DMADT_4 + DMAEN + DMASRCINCR_3 ; // Rpt single tranfer, inc dst, Int
    DMA1SZ = (sizeof(data_pwm_test)/sizeof(uint16_t)) - 2; // DMA0 size = 1

    SPWM_Freq(50);
}
#endif
